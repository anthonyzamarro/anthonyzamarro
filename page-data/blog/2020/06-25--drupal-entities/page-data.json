{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2020/06-25--drupal-entities/","result":{"data":{"mdx":{"frontmatter":{"title":"Drupal Entities"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Drupal Entities\",\n  \"date\": \"2020-06-25T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h6\", null, \"date: 2020-06-24\"), mdx(\"p\", null, \"Entities are the most general types that make up the Drupal framework. They are the fundamental building blocks on which other data structures are built such as nodes, files, and users.\"), mdx(\"p\", null, \"I see entities as being equivalent to classes in OOP. They are the blueprints to what will eventually be useable pieces of data. \"), mdx(\"p\", null, \"Bundles are an implementation of an entity type to which fields can be attached. Content types are the most common and familiar example of a bundle (article, page, blog post, etc.). These would all be considered bundles of the node entity type.\"), mdx(\"p\", null, \"While the node entity type bundles can vary considerably, some entity types have only one bundle such as user. There can be different node entity types, but there is only user entity type. And other entity types such as file don't have a bundle.\"), mdx(\"p\", null, \"Thing to remember:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Bundles are a subtype of an entity. They are collections of fields applied to an entity. An example is a page is a bundle type of a node entity type\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Without bundles, you cannot attach fields to an entity of that type\")), mdx(\"p\", null, \"Node entity types have both properties and fields.\\nProperties are common across all entity types. Examples are IDs, Title, and author.\\nFields are unique to each entity type and are configurable per entity type. For example,\\na blog post can have a background image field while a page might have just an image field and not a background image field.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"date: 2020-06-24 Entities are the most general types that make up the Drupal framework. They are the fundamental building blocks on whichâ€¦"}},"pageContext":{"slug":"/blog/2020/06-25--drupal-entities/","id":"13f640f0-3789-52a7-831d-1594f9135ebb"}}}